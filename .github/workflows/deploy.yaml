name: Deploy

on:
  push:
    tags:
      - '*'
  pull_request:
    branches:
      - '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_IMAGE: rutger505/portfolio
  APP_NAME: portfolio

jobs:
  build-docker-image:
    name: Build Docker image
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate tag
        id: tag
        run: |
          if [ "$GITHUB_REF" = "refs/tags/"* ]; then
            TAG=$GITHUB_REF_NAME
          else
            TAG=$GITHUB_SHA
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Setting TAG to $TAG"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ steps.tag.outputs.tag }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:cache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:cache,mode=max

  deploy-to-kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-docker-image

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate deployment config
        id: config
        run: |
          # Set environment and hosts
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            ENVIRONMENT=production
            INGRESS_HOST=${{ vars.BASE_DOMAIN }}
          else
            ENVIRONMENT=pr-${{ github.event.pull_request.number }}
            INGRESS_HOST=${{ github.sha }}.${{ vars.BASE_DOMAIN }}
          fi
          
          echo "Setting environment to $ENVIRONMENT"
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          
          echo "Setting ingress host to $INGRESS_HOST"
          echo "ingress_host=$INGRESS_HOST" >> $GITHUB_OUTPUT
          
          NAMESPACE=$APP_NAME-$ENVIRONMENT
          echo "Setting namespace to NAMESPACE"
          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT

      - name: Install envsubst
        run: sudo apt-get update && sudo apt-get install -y gettext-base

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.31.0'

      - name: Set up Kubernetes context
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Insert environment variables into Kubernetes files
        env:
          ENVIRONMENT: ${{ steps.config.outputs.environment }}
          NAMESPACE: ${{ steps.config.outputs.namespace }}
          TAG: ${{ needs.build-docker-image.outputs.tag }}
          INGRESS_HOST: ${{ steps.config.outputs.ingress_host }}
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
          RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
        run: |
          FILES=$(ls k8s/*.yaml | tr '\n' ' ')
          
          for FILE in $FILES; do
            echo "Processing $FILE"
            envsubst < $FILE > /tmp/envsubst || exit 1
            mv /tmp/envsubst $FILE || exit 1
          done

      - name: Deploy to Kubernetes
        uses: Azure/k8s-deploy@v5
        with:
          namespace: ${{ steps.config.outputs.namespace }}
          manifests: |
            k8s/namespace.yaml
            k8s/

      - name: Comment PR deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const emoji = status === 'success' ? 'üöÄ' : '‚ö†Ô∏è';
            const url = 'https://${{ steps.config.outputs.ingress_host }}';
            const message = status === 'success'
              ? `${emoji} Test deployment available at: ${url}`
              : `${emoji} Test deployment failed with status: ${status}`;

            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.issue.number
            });

            for (const comment of comments) {
              if (comment.body.includes('Test deployment available at:') || 
                  comment.body.includes('Test Deployment failed with status:')) {
                await github.rest.issues.deleteComment({
                  ...context.repo,
                  comment_id: comment.id
                });
              }
            }

            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: message
            });