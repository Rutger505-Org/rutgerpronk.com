name: Cleanup PR Environment

on:
  pull_request:
    types: [ closed ]

jobs:
  cleanup:
    name: Delete PR Environment
    runs-on: ubuntu-latest

    steps:
      - name: Define environment name
        run: |
          ENVIRONMENT=pull-request-${{ github.event.pull_request.number }}
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "NAMESPACE=portfolio-$ENVIRONMENT" >> $GITHUB_ENV

      - name: Safety check
        run: |
          if [[ "$NAMESPACE" == *"production"* ]]; then
            echo "❌ Refusing to delete namespace containing 'production'"
            exit 1
          fi
          
          if [[ "$NAMESPACE" != portfolio-pull-request-* ]]; then
            echo "❌ Namespace doesn't match expected pattern for PR environments"
            exit 1
          fi

      - uses: azure/setup-kubectl@v4
        with:
          version: 'v1.31.0'

      - name: Kubernetes Set Context
        uses: Azure/k8s-set-context@v4.0.1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Delete namespace
        run: |
          echo "Deleting namespace: $NAMESPACE"
          if kubectl get namespace "$NAMESPACE" 2>/dev/null; then
            kubectl delete namespace "$NAMESPACE" --timeout=5m
            echo "✅ Namespace $NAMESPACE deleted successfully"
          else
            echo "⚠️ Namespace $NAMESPACE not found"
          fi

      - name: Comment cleanup status
        if: always()
        uses: actions/github-script@v7
        env:
          GITHUB_JOB_STATUS: ${{ job.status }}
          NAMESPACE: ${{ env.NAMESPACE }}
        with:
          script: |
            const status = process.env.GITHUB_JOB_STATUS || 'unknown';
            const emoji = status === 'success' ? '✅' : '❌';
            const message = `${emoji} Cleanup ${status}: Test environment \`${process.env.NAMESPACE}\` cleanup ${status === 'success' ? 'completed' : 'failed'}.`;
            
            // Find and delete previous deployment comments
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            for (const comment of comments) {
              if (comment.body.includes('Cleanup') &&
                  comment.body.includes('Test environment')) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id
                });
              }
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });
            
            console.log('Successfully posted cleanup comment');